import pygame
import sys

# Initialize pygame
pygame.init()

# Scaling factor to fit window on screen
scale = 0.5

# Set up the main window
width = int(1920 * scale)
height = int(1080 * scale)
screen = pygame.display.set_mode((width, height), 0, 32)  # Add a flag later for hardware implementation
pygame.display.set_caption("Worlds")
pygame.transform.smoothscale(screen, (width * 2, height * 2))
screen_width = screen.get_width()
screen_height = screen.get_height()

# Define colors
background_color = (255, 255, 255)
login_button_color = (0, 0, 0)
button_hover_color = (240, 240, 240)
text_color = (255, 255, 255)
draw_color = (0, 255, 0)
inactive_button_color = (200, 200, 200) # If the player has not changed the name of the game the start button is 'inactive'

# Set up fonts
font = pygame.font.SysFont(None, int(36 * scale))

# Login Button
button_width = 320 * scale
button_height = 50 * scale
login_str = 'LOGIN' # Initialize as this to que login
login_rect = pygame.Rect(screen_width / 2 - button_width / 2, screen_height / 2 - button_height / 2 + 100 * scale, 
                         button_width, button_height)

# Load Game Buttons
game1_str = 'Load New Game 1'
game1_rect = pygame.Rect(screen_width / 2 - button_width / 2, screen_height / 3 - button_height / 2,
                          button_width, button_height)
game1_load = False  # If a game has been saved to this load option
game2_str = 'Load New Game 2'
game2_rect = pygame.Rect(screen_width / 2 - button_width / 2, screen_height / 2 - button_height / 2,
                          button_width, button_height)
game2_load = False
game3_str = 'Load New Game 3'
game3_rect = pygame.Rect(screen_width / 2 - button_width / 2, screen_height*(1- 1/3) - button_height / 2,
                          button_width, button_height)
game3_load = False

# Start Game Button
start_rect = pygame.Rect(screen_width / 3 - button_width / 2, screen_height*(1- 1/3) - button_height / 2,
                          button_width, button_height)

# Game Name Button
game_name_rect = pygame.Rect(screen_width / 3 - button_width / 2, screen_height / 3, button_width, button_height)

# Define button properties
return_button_rect = pygame.Rect((screen_width / 3 - button_width / 2)*2, screen_height*(1- 1/3) - button_height / 2,
                                  button_width, button_height)

class game:
    '''
    Game objects, so far only have name description.
    Each object will have it's data altered once saving is figured out
    Would like a preview picture of the game.
    '''
    def __init__(self):
        self.name = "Load New Game"
        self.lines = []
    
    def change_name(self, new_name):
        self.name = new_name

    def add_line(self, start_pos, end_pos):
        self.lines.append((start_pos, end_pos))

    def draw_lines(self, screen, color):
        for line in self.lines:
            pygame.draw.line(screen, color, line[0], line[1], 3)

def draw_button(screen, color, rect, text):
    pygame.draw.rect(screen, color, rect)
    text_surf = font.render(text, True, text_color)
    text_rect = text_surf.get_rect(center=rect.center)
    screen.blit(text_surf, text_rect)

def login_screen():
    '''
    Login screen presented at the start of the game, requesting a pin to access the game
    '''
    global login_str
    running = True
    logging_in = False
    while running:
        screen.fill(background_color)
        mouse_pos = pygame.mouse.get_pos()

        button_color_current = login_button_color
        if login_rect.collidepoint(mouse_pos):
            button_color_current = button_hover_color

        draw_button(screen, button_color_current, login_rect, login_str)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
                pygame.quit()
                sys.exit()
            elif event.type == pygame.MOUSEBUTTONDOWN and login_rect.collidepoint(mouse_pos) and logging_in is False:
                print("clicked")
                logging_in = True
                login_str = ''
            elif logging_in:
                if event.type == pygame.KEYDOWN:
                    print("typing")
                    if event.key == pygame.K_BACKSPACE:
                        login_str = login_str[:-1]
                    elif event.key == pygame.K_RETURN and login_str == '1234':
                        print("logging in")
                        login_str = ''
                        load_screen()
                    else:
                        login_str += event.unicode
            

        pygame.display.flip()

def load_screen():
    '''
    Load screen is presented after the login screen asking the user to select from up to 3 saved World games
    '''
    global login_str
    running = True
    while running:
        screen.fill(background_color)
        mouse_pos = pygame.mouse.get_pos()

        button_color_current = login_button_color
        if login_rect.collidepoint(mouse_pos):
            button_color_current = button_hover_color

        draw_button(screen, button_color_current, game1_rect, game1.name)
        draw_button(screen, button_color_current, game2_rect, game2.name)
        draw_button(screen, button_color_current, game3_rect, game3.name)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
                pygame.quit()
                sys.exit()
            elif event.type == pygame.MOUSEBUTTONDOWN and game1_rect.collidepoint(mouse_pos):
                game_detail_screen(game1)
            elif event.type == pygame.MOUSEBUTTONDOWN and game2_rect.collidepoint(mouse_pos):
                game_detail_screen(game2)
            elif event.type == pygame.MOUSEBUTTONDOWN and game3_rect.collidepoint(mouse_pos):
                game_detail_screen(game3)
                    
                    
        pygame.display.flip()

def game_detail_screen(self):
    '''
    Screen that shows once a game is selected to show details
    '''
    running = True
    typing = False  # If the player is typing a new name
    game_name = self.name  # Name of the game if being changed
    inactive_button = True
    while running:
        screen.fill(background_color)
        mouse_pos = pygame.mouse.get_pos()

        button_color_current = login_button_color
        if login_rect.collidepoint(mouse_pos):
            button_color_current = button_hover_color

        if game_name != 'Load New Game' and typing is False:
            draw_button(screen, button_color_current, start_rect, "Start")      # Start Game
            inactive_button = False
        else:
            draw_button(screen, inactive_button_color, start_rect, "Start")     # Button is inactive and cannot be used

        
        draw_button(screen, button_color_current, return_button_rect, "Back")   # Return to Load Game Screen
        draw_button(screen, button_color_current, game_name_rect, game_name)    # Name of the game

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
                pygame.quit()
                sys.exit()
            elif event.type == pygame.MOUSEBUTTONDOWN and game_name_rect.collidepoint(mouse_pos) and typing is False:
                print("Clicked")
                typing = True
                game_name = ''
            elif typing is True and event.type == pygame.MOUSEBUTTONDOWN:
                typing = False
            elif typing:
                draw_button(screen, button_color_current, game_name_rect, game_name)    # Re-draw button to show typing
                if event.type == pygame.KEYDOWN:
                    print("typing")
                    if event.key == pygame.K_BACKSPACE:
                        game_name = game_name[:-1]
                    elif event.key == pygame.K_RETURN:
                        print("Name changed")
                        self.change_name(game_name)
                        typing = False
                    else:
                        game_name += event.unicode
            elif event.type == pygame.MOUSEBUTTONDOWN and return_button_rect.collidepoint(mouse_pos):
                load_screen()
            elif event.type == pygame.MOUSEBUTTONDOWN and start_rect.collidepoint(mouse_pos) and inactive_button is False:
                world_screen(self)
        pygame.display.flip()

def world_screen(self):
    running = True
    drawing = False
    last_pos = None
    screen.fill((255, 255, 255))
    self.draw_lines(screen, draw_color)  # Draw saved lines
    while running:
        
        mouse_pos = pygame.mouse.get_pos()

        button_color_current = login_button_color
        if return_button_rect.collidepoint(mouse_pos):
            button_color_current = button_hover_color

        draw_button(screen, button_color_current, return_button_rect, "Return")

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
                pygame.quit()
                sys.exit()
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if event.button == 1:
                    if return_button_rect.collidepoint(mouse_pos):
                        load_screen()
                        running = False
                    else:
                        drawing = True
                        last_pos = event.pos
            elif event.type == pygame.MOUSEBUTTONUP:
                current_pos = event.pos
                if current_pos == last_pos:
                    pygame.draw.line(screen, draw_color, last_pos, current_pos, 2) # Draws a dot if just clicked
                if event.button == 1:
                    drawing = False
                    last_pos = None
            elif event.type == pygame.MOUSEMOTION:
                if drawing:
                    current_pos = event.pos
                    if last_pos:
                        pygame.draw.line(screen, draw_color, last_pos, current_pos, 2)  # Draws the line connecting points
                        self.add_line(last_pos, current_pos)  # Save the drawn line
                    last_pos = current_pos


        pygame.display.flip()
        # pygame.display.update()

if __name__ == "__main__":
    game1 = game()
    game2 = game()
    game3 = game()
    login_screen()
